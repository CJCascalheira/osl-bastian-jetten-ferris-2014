facet_wrap(~ valence + condition)
# Normality check for neg_affect
with(bastian_clean, shapiro.test(neg_affect[condition == "Control"]))
with(bastian_clean, shapiro.test(neg_affect[condition == "Pain"]))
# Normality check for pos_affect
with(bastian_clean, shapiro.test(pos_affect[condition == "Control"]))
with(bastian_clean, shapiro.test(pos_affect[condition == "Pain"]))
with(bastian_clean, shapiro.test(neg_affect[condition == "Control"]))
with(bastian_clean, shapiro.test(neg_affect[condition == "Pain"]))
with(bastian_clean, shapiro.test(pos_affect[condition == "Control"]))
with(bastian_clean, shapiro.test(pos_affect[condition == "Pain"]))
leveneTest(task_unpleasantness ~ condition, data = bastian_clean)
leveneTest(task_intensity ~ condition, data = bastian_clean)
# Homoscedasticity?
leveneTest(neg_affect ~ condition, data = bastian_clean)
leveneTest(pos_affect ~ condition, data = bastian_clean)
leveneTest(neg_affect ~ condition, data = bastian_clean)
leveneTest(pos_affect ~ condition, data = bastian_clean)
# Independent t-test neg_affect
t.test(pain$neg_affect, control$neg_affect,
paired = FALSE, var.equal = TRUE)
# Independent t-test pos_affect
t.test(pain$pos_affect, control$pos_affect,
paired = FALSE, var.equal = TRUE)
# Independent t-test neg_affect
t.test(pain$neg_affect, control$neg_affect,
paired = FALSE, var.equal = TRUE)
# Independent t-test pos_affect
t.test(pain$pos_affect, control$pos_affect,
paired = FALSE, var.equal = TRUE)
pain_desc
control_desc
names(bastian_clean)
# Outliers?
bastian_clean %>%
select(condition, threat_mean, challenge_mean) %>%
gather(task, rating, -condition) %>%
ggplot(aes(x = rating)) +
geom_boxplot() +
facet_wrap(~ task)
# Outliers?
bastian_clean %>%
select(condition, threat_mean, challenge_mean) %>%
gather(task, rating, -condition) %>%
ggplot(aes(x = rating)) +
geom_boxplot() +
facet_wrap(~ condition)
# Outliers?
bastian_clean %>%
select(condition, threat_mean, challenge_mean) %>%
gather(task, rating, -condition) %>%
ggplot(aes(x = condition, y = rating)) +
geom_boxplot() +
facet_wrap(~ task)
# Visualize normality
bastian_clean %>%
select(condition, threat_mean, challenge_mean) %>%
gather(task, rating, -condition) %>%
ggplot(aes(x = rating)) +
geom_histogram(bins = 10) +
facet_wrap(~ task + condition)
# Normality check for challenge_mean
with(bastian_clean, shapiro.test(challenge_mean[condition == "Control"]))
with(bastian_clean, shapiro.test(challenge_mean[condition == "Pain"]))
# Normality check for threat_mean
with(bastian_clean, shapiro.test(threat_mean[condition == "Control"]))
with(bastian_clean, shapiro.test(threat_mean[condition == "Pain"]))
# Homoscedasticity?
leveneTest(challenge_mean ~ condition, data = bastian_clean)
leveneTest(threat_mean ~ condition, data = bastian_clean)
# Independent t.test challenge_mean
t.test(pain$challenge_mean, control$challenge_mean,
paired = FALSE, var.equal = TRUE)
# Independent t.test threat_mean
t.test(pain$threat_mean, control$threat_mean,
paired = FALSE, var.equal = TRUE)
# Independent t.test challenge_mean
t.test(pain$challenge_mean, control$challenge_mean,
paired = FALSE, var.equal = TRUE)
# Independent t.test threat_mean
t.test(pain$threat_mean, control$threat_mean,
paired = FALSE, var.equal = TRUE)
pain_desc
control_desc
#### Significant outliers?
```{r}
bastian_clean %>%
select(condition, threat_mean, challenge_mean) %>%
gather(task, rating, -condition) %>%
ggplot(aes(x = condition, y = rating)) +
geom_boxplot() +
facet_wrap(~ task)
with(bastian_clean, shapiro.test(challenge_mean[condition == "Control"]))
with(bastian_clean, shapiro.test(challenge_mean[condition == "Pain"]))
with(bastian_clean, shapiro.test(threat_mean[condition == "Control"]))
with(bastian_clean, shapiro.test(threat_mean[condition == "Pain"]))
bastian_clean %>%
select(condition, threat_mean, challenge_mean) %>%
gather(task, rating, -condition) %>%
ggplot(aes(x = rating)) +
geom_histogram(bins = 10) +
facet_wrap(~ task + condition)
leveneTest(challenge_mean ~ condition, data = bastian_clean)
leveneTest(threat_mean ~ condition, data = bastian_clean)
# Construct APA theme
apa_theme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 12, family = "Times New Roman"))
# Outliers?
ggplot(bastian_clean, aes(x = condition, y = bonding_mean)) +
geom_boxplot()
# Visualize the distribution
hist(bastian_clean$bonding_mean)
# Visualize the distribution
ggplot(bastian_clean, aes(x = bonding_mean)) +
geom_histogram(bins = 10) +
facet_wrap(~ condition)
aov(bonding_mean ~ condition, data = bastian_clean)
anova(aov(bonding_mean ~ condition, data = bastian_clean))
# Normality?
bastian_residuals <- residuals(object = bastian_aov)
# Model the variance
bastian_aov <- aov(bonding_mean ~ condition, data = bastian_clean)
# Summarize the ANOVA
anova(bastian_aov)
# Normality?
bastian_residuals <- residuals(object = bastian_aov)
shapiro.test(bastian_residuals)
#
with(bastian_clean, shapiro.test(bonding_mean[condition == "Control"]))
with(bastian_clean, shapiro.test(bonding_mean[condition == "Pain"]))
# Distribution of residuals
bastian_residuals <- residuals(object = bastian_aov)
shapiro.test(bastian_residuals)
# Model the variance
bastian_aov <- aov(bonding_mean ~ condition, data = bastian_clean)
# Summarize the ANOVA
anova(bastian_aov)
pain_desc
control_desc
with(bastian_clean, shapiro.test(bonding_mean[condition == "Control"]))
with(bastian_clean, shapiro.test(bonding_mean[condition == "Pain"]))
bastian_residuals <- residuals(object = bastian_aov)
shapiro.test(bastian_residuals)
ggplot(bastian_clean, aes(x = bonding_mean)) +
geom_histogram(bins = 10) +
facet_wrap(~ condition)
# Homoscedasticity?
leveneTest(bonding_mean ~ condition, data = bastian_clean)
pain_desc
# Merge variables holding mean and se
merge(pain_desc, control_desc, by = c("mean", "sd", "se"))
# Merge variables holding mean and se
full_join(pain_desc, control_desc, by = c("mean", "sd", "se"))
# Merge variables holding mean and se
merge(pain_desc, control_desc, by = c("mean", "sd", "se", all = TRUE)
# Merge variables holding mean and se
merge(pain_desc, control_desc, by = c("mean", "sd", "se", all = TRUE))
# Merge variables holding mean and se
merge(pain_desc, control_desc, by = c("mean", "sd", "se", all = TRUE))
# Merge variables holding mean and se
merge(pain_desc, control_desc, by = c("mean", "sd", "se"), all = TRUE)
control_desc
class(control_desc)
# Select variables of interest
control_desc %>%
rownames_to_column()
# Select variables of interest
rownames_to_column(control_desc)
row.names(control_desc)
# Select variables of interest
control_desc %>%
mutate(measure = row.names(control_desc))
# Select variables of interest
control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(mean, se) %>%
filter(measure == "bonding_mean")
# Select variables of interest
control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(mean, se)
# Select variables of interest
control_desc %>%
mutate(measure = row.names(control_desc))
# Select variables of interest
control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc))
control_dynamite
# Select variables of interest
(control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean"))
(pain_dynamite <- pain_desc %>%
mutate(measure = row.names(pain_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean"))
# Merge variables holding mean and se
full_join(pain_dynamite, control_dynamite, by = c("measure"))
# Merge variables holding mean and se
merge(pain_dynamite, control_dynamite, by = c("measure", "mean", "se"), all = TRUE)
# Select variables of interest
(control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean"))
# Select variables of interest
(control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "control"))
(pain_dynamite <- pain_desc %>%
mutate(measure = row.names(pain_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "pain"))
# Merge variables holding mean and se
merge(pain_dynamite, control_dynamite, by = c("measure", "condition", "mean", "se"), all = TRUE)
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = mean, fill = condition)) +
geom_bar(position = "dodge")
# Merge variables holding mean and standard error
dynamite_plot <- merge(pain_dynamite, control_dynamite,
by = c("measure", "condition", "mean", "se"), all = TRUE)
(control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "control"))
(pain_dynamite <- pain_desc %>%
mutate(measure = row.names(pain_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "pain"))
dynamite_plot <- merge(pain_dynamite, control_dynamite,
by = c("measure", "condition", "mean", "se"), all = TRUE)
(dynamite_plot <- merge(pain_dynamite, control_dynamite,
by = c("measure", "condition", "mean", "se"), all = TRUE))
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = mean, fill = condition)) +
geom_bar(position = "dodge")
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge")
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity")
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black, size = 0.5") +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual("legend",
values = c("Control Group" = "#FFFFFF", "Pain Group" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 10)) +
scale_y_continuous(breaks = 0:10) +
apa_theme
# Construct APA theme
apa_theme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 12, family = "Times New Roman"))
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black, size = 0.5") +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual("legend",
values = c("Control Group" = "#FFFFFF", "Pain Group" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 10)) +
scale_y_continuous(breaks = 0:10) +
apa_theme
# Construct APA theme
apa_theme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 12))
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black, size = 0.5") +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual("legend",
values = c("Control Group" = "#FFFFFF", "Pain Group" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 10)) +
scale_y_continuous(breaks = 0:10) +
apa_theme
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = "0.5") +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual("legend",
values = c("Control Group" = "#FFFFFF", "Pain Group" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 10)) +
scale_y_continuous(breaks = 0:10) +
apa_theme
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = "0.5") +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
apa_theme
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual("legend",
values = c("Control Group" = "#FFFFFF", "Pain Group" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 10)) +
scale_y_continuous(breaks = 0:10) +
apa_theme
# Construct APA theme
apa_theme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 12, family = "Times New Roman"))
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual("legend",
values = c("Control Group" = "#FFFFFF", "Pain Group" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 7)) +
scale_y_continuous(breaks = 0:7) +
apa_theme
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual("legend",
values = c("control" = "#FFFFFF", "pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual(values = c("control" = "#FFFFFF", "pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme
# Select variables of interest
(control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "Control"))
(pain_dynamite <- pain_desc %>%
mutate(measure = row.names(pain_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "Pain"))
# Merge variables holding mean and standard error
dynamite_plot <- merge(pain_dynamite, control_dynamite,
by = c("measure", "condition", "mean", "se"), all = TRUE)
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "Group", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
theme(legend.position = "none") +
apa_theme
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.2, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme +
theme(legend.position = "none")
# Visualize pain's affect on social bonding
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.1, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme +
theme(legend.position = "none")
control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "Control")
pain_dynamite <- pain_desc %>%
mutate(measure = row.names(pain_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "Pain")
apa_theme <- theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.line = element_line(),
plot.title = element_text(hjust = 0.5),
text = element_text(size = 12))
control_dynamite <- control_desc %>%
mutate(measure = row.names(control_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "Control")
pain_dynamite <- pain_desc %>%
mutate(measure = row.names(pain_desc)) %>%
select(measure, mean, se) %>%
filter(measure == "bonding_mean") %>%
mutate(condition = "Pain")
(dynamite_plot <- merge(pain_dynamite, control_dynamite,
by = c("measure", "condition", "mean", "se"), all = TRUE))
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.1, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme +
theme(legend.position = "none")
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.1, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme +
theme(legend.position = "none")
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.1, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme +
theme(legend.position = "none")
ggplot(dynamite_plot, aes(x = condition, y = mean, fill = condition)) +
geom_bar(position = "dodge", stat = "identity", color = "black", size = 0.5) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se),
width = 0.1, position = position_dodge(0.9)) +
scale_fill_manual(values = c("Control" = "#FFFFFF", "Pain" = "#999999"),
labels = c("Control", "Pain")) +
labs(x = "", y = "Mean Level of Social Bonding") +
expand_limits(y = c(1, 5)) +
scale_y_continuous(breaks = 0:5) +
apa_theme +
theme(legend.position = "none")
